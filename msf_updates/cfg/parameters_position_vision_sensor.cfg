#! /usr/bin/env python

# Copyright (c) 2010, Stephan Weiss, ASL, ETH Zurich, Switzerland
# You can contact the author at <stephan dot weiss at ieee dot org>
# Copyright (c) 2013, Simon Lynen, ASL, ETH Zurich, Switzerland
# You can contact the author at <simon dot lynen at mavt dot ethz dot ch>

# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# * Neither the name of ETHZ-ASL nor the
# names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ETHZ-ASL BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


PACKAGE='msf_updates'
import roslib; roslib.load_manifest(PACKAGE)

#from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

# @todo Think about levels. Setting most of these to STOP to guarantee atomicity.
# @todo Double check these ranges, defaults

INIT_FILTER     = gen.const("INIT_FILTER",              int_t, 0x00000001, "core_init_filter")
MISC            = gen.const("MISC",                     int_t, 0x00000002, "misc")
SET_HEIGHT      = gen.const("SET_HEIGHT",              int_t, 0x00000004, "core_set_height")



#       Name                 Type      Reconfiguration level                Description   Default   Min   Max
gen.add("core_init_filter",       bool_t,   INIT_FILTER["value"],                    "call filter init using defined scale",                    False)
gen.add("core_set_height",        bool_t,   SET_HEIGHT["value"],                     "call filter init using defined height",                    False)
gen.add("core_height",            double_t, MISC["value"],                           "height in m for init",         1,          0.1,       20)

gen.add("pose_initial_scale",        double_t, MISC["value"],                           "value for initial scale",          1,      	0.001,		30)
gen.add("pose_fixed_scale",       bool_t,   MISC["value"],                           "fix scale",                    	False)
gen.add("pose_fixed_p_ci", bool_t, MISC["value"], "fix calibration state position", False)
gen.add("pose_fixed_q_ci", bool_t, MISC["value"], "fix calibration state attitude", False)
gen.add("pose_fixed_p_vw", bool_t, MISC["value"], "fix vision world position drift", False)
gen.add("pose_fixed_q_vw", bool_t, MISC["value"], "fix vision world attitude drift", False)

gen.add("pose_noise_scale",       double_t, MISC["value"],                           "propagation: noise scale (std. dev)",         0.0,		0, 	        10.0)

gen.add("pose_noise_pvw",         double_t, MISC["value"],                           "propagation: noise pvw (std. dev)",           0.0,        0,          10.0)
gen.add("pose_noise_qwv",         double_t, MISC["value"],                           "propagation: noise qwv (std. dev)",           0.0,        0,          10.0)
gen.add("pose_noise_pci",         double_t, MISC["value"],                           "propagation: noise pic (std. dev)",           0.0,        0,          10.0)
gen.add("pose_noise_qci",         double_t, MISC["value"],                           "propagation: noise qci (std. dev)",           0.0,        0,          10.0)
gen.add("pose_noise_meas_p",       double_t, MISC["value"],                           "noise for measurement sensor (std. dev)",         0.01,          0,       10)
gen.add("pose_noise_meas_q",       double_t, MISC["value"],                           "noise for measurement sensor (std. dev)",         0.01,          0,       10)

gen.add("position_noise_meas",       double_t, MISC["value"],                           "noise for measurement sensor (std. dev)",         0.01,          0,       10)
gen.add("position_yaw_init",       double_t, MISC["value"],                           "initial value of yaw",         0,          0,       359)

gen.add("position_fixed_ppi", bool_t, MISC["value"], "fix calibration state position", False)
gen.add("position_delay",             double_t, MISC["value"],                           "fix delay in seconds",               0.02,       -2.0,     2.0)

exit(gen.generate(PACKAGE, "Config", "PositionVisionSensor"))
